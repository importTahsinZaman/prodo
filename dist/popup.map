{"version":3,"file":"popup.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://prodov1/./src/helper.js","webpack://prodov1/webpack/bootstrap","webpack://prodov1/webpack/runtime/define property getters","webpack://prodov1/webpack/runtime/hasOwnProperty shorthand","webpack://prodov1/webpack/runtime/make namespace object","webpack://prodov1/./src/popup.js"],"sourcesContent":["export function getNeededXp(target_level) {\n  return Math.floor(56 * target_level ** 1.1);\n}\n\nexport function setData() {\n  chrome.storage.sync.set({ timer_running: false });\n  chrome.storage.sync.set({ time_remaining: 0 });\n  chrome.storage.sync.set({ timer_paused: false });\n  chrome.storage.sync.set({ timer: 0 });\n  chrome.storage.sync.set({ break_time: false });\n  chrome.storage.sync.set({ switch_break: false });\n\n  chrome.storage.sync.set({ owned_pets: [\"f001\", \"f002\", \"f003\"] });\n  chrome.storage.sync.set({ current_pet: \"f002\" });\n  chrome.storage.sync.set({\n    f001: {\n      name: \"bruh\",\n      level: 61,\n      current_xp: 0,\n      needed_xp: getNeededXp(2),\n    },\n    f002: {\n      name: \"David C Benito\",\n      level: 29,\n      current_xp: 2324,\n      needed_xp: getNeededXp(30),\n    },\n    f003: {\n      name: \"bruh3\",\n      level: 1,\n      current_xp: 0,\n      needed_xp: getNeededXp(2),\n    },\n  });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { getNeededXp, setData } from \"./helper.js\";\n\n//Global Pet Data Variables, used in: getData(); window.onload(){at the beginning};\nvar current_pet = \"\";\nvar current_pet_name = \"\";\nvar current_pet_level = 1;\nvar current_pet_xp = 0;\nvar current_pet_evo = \"evo1\";\nvar current_pet_gif = \"\";\n\ngetData();\n\nfunction getData() {\n  //Load In Data\n  chrome.storage.sync.get([\"current_pet\"], (result1) => {\n    current_pet = result1.current_pet;\n    chrome.storage.sync.get([`${current_pet}`], (result2) => {\n      current_pet_level = result2[current_pet].level;\n      current_pet_name = result2[current_pet].name;\n      current_pet_xp = result2[current_pet].current_xp;\n      if (current_pet_level >= 60) {\n        current_pet_evo = \"evo3\";\n      } else if (current_pet_level >= 30) {\n        current_pet_evo = \"evo2\";\n      }\n      current_pet_gif = `${current_pet}_${current_pet_evo}`;\n      loadUI();\n    });\n  });\n  chrome.storage.sync.get([\"task_list\"], (result) => {\n    document.getElementById(\"task_list\").textContent = result.task_list;\n  });\n  chrome.storage.sync.get(\n    [\n      \"timer_running\",\n      \"timer_paused\",\n      \"time_remaining\",\n      \"break_time\",\n      \"switch_break\",\n    ],\n    (result) => {\n      break_time = result.break_time;\n      if (break_time) {\n        document.getElementById(\"study_title\").innerHTML = \"BREAK\";\n        time = break_amount;\n      } else {\n        document.getElementById(\"study_title\").innerHTML = \"STUDY\";\n        time = study_amount;\n      }\n      if (result.timer_running) {\n        loadTimer();\n      } else if (result.timer_paused) {\n        var minutes = Math.floor(result.time_remaining / 60000);\n        var seconds = Math.round(result.time_remaining / 1000) % 60;\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\n        document.getElementById(\n          \"study_clock\"\n        ).innerHTML = `${minutes}:${seconds}`;\n      } else {\n        var minutes = Math.floor(time / 60000);\n        var seconds = Math.round(time / 1000) % 60;\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\n        document.getElementById(\n          \"study_clock\"\n        ).innerHTML = `${minutes}:${seconds}`;\n      }\n      if (result.switch_break) {\n        switchBreak();\n      }\n    }\n  );\n}\n\n//Data-driven rendering processes\nfunction loadUI() {\n  chrome.tabs.query({ currentWindow: true, active: true }, function (tabs) {\n    var url = tabs[0].url.toString();\n\n    const pet = document.getElementById(\"pet\");\n\n    if (!url.includes(\"https://classroom.google.com/\")) {\n      pet.src = chrome.runtime.getURL(`assets/Pets/${current_pet_gif}.gif`);\n    } else {\n      pet.style.zIndex = -1000;\n    }\n  });\n\n  const name_text = document.getElementById(\"name\");\n  const level_text = document.getElementById(\"level\");\n  const xp_progress_text = document.getElementById(\"xp_progress\");\n  const xp_status = document.getElementById(\"xp_status\");\n\n  name_text.innerHTML = current_pet_name;\n  level_text.innerHTML = `Level:${current_pet_level}`;\n  xp_progress_text.innerHTML = `${current_pet_xp}/${getNeededXp(\n    current_pet_level + 1\n  )}`;\n  xp_status.style.width = `${\n    (current_pet_xp / getNeededXp(current_pet_level + 1)) * 100\n  }%`;\n\n  if (timer_paused) {\n    document.getElementById(\"start_pause_button\").innerHTML = \"PAUSE\";\n  }\n}\n\n//Click Events:\nsetTimeout(function () {\n  document.getElementById(\"computer\").addEventListener(\"click\", () => {\n    document.getElementById(\"game_popup\").classList.toggle(\"active\");\n    document.getElementById(\"bg_overlay\").classList.toggle(\"active\");\n    document.getElementById(\"close_popup_button\").classList.toggle(\"active\");\n    if (\n      break_time &&\n      document.getElementById(\"start_pause_button\").innerHTML == \"PAUSE\"\n    ) {\n      document.getElementById(\"game_popup_message\").innerHTML =\n        \"REOPEN THE EXTENSION POPUP TO START GAMING\";\n    } else {\n      document.getElementById(\"game_popup_message\").innerHTML =\n        \"YOU CAN ONLY GAME WHILE THE BREAK TIMER IS RUNNING\";\n    }\n  });\n  document.getElementById(\"bag_button\").addEventListener(\"click\", () => {\n    setData();\n  });\n  document\n    .getElementById(\"close_popup_button\")\n    .addEventListener(\"click\", function () {\n      document.getElementById(\"game_popup\").classList.remove(\"active\");\n      document.getElementById(\"study_popup\").classList.remove(\"active\");\n      document.getElementById(\"bg_overlay\").classList.remove(\"active\");\n      document.getElementById(\"close_popup_button\").classList.remove(\"active\");\n    });\n\n  document\n    .getElementById(\"study_button\")\n    .addEventListener(\"click\", function () {\n      document.getElementById(\"study_popup\").classList.toggle(\"active\");\n      document.getElementById(\"bg_overlay\").classList.toggle(\"active\");\n      document.getElementById(\"close_popup_button\").classList.toggle(\"active\");\n    });\n\n  document.getElementById(\"task_list\").addEventListener(\"blur\", function () {\n    chrome.storage.sync.set({\n      task_list: document.getElementById(\"task_list\").value,\n    });\n  });\n\n  document\n    .getElementById(\"start_pause_button\")\n    .addEventListener(\"click\", function () {\n      if (document.getElementById(\"start_pause_button\").innerHTML == \"START\") {\n        startTimer(false);\n      } else {\n        pauseTimer(false);\n      }\n    });\n}, 100);\n\nconst study_amount = 32000;\nconst break_amount = 30000;\nvar time = null;\nvar target_time = 0;\nvar update_timer_interval = null;\nvar timer_paused = false;\nvar break_time = false;\n\nfunction loadTimer() {\n  document.getElementById(\"start_pause_button\").innerHTML = \"PAUSE\";\n  chrome.storage.sync.get([\"timer\"], (result) => {\n    var now = new Date().getTime();\n    target_time = result.timer;\n    updateTimer();\n    update_timer_interval = setInterval(updateTimer, 1000);\n  });\n}\n\nfunction startTimer(leave_timer) {\n  document.getElementById(\"start_pause_button\").innerHTML = \"PAUSE\";\n  chrome.storage.sync.set({ timer_running: true });\n  chrome.storage.sync.get([\"timer_paused\", \"time_remaining\"], (result) => {\n    if (result.timer_paused) {\n      var now = new Date();\n      target_time = new Date(now.getTime() + result.time_remaining);\n      if (!leave_timer)\n        chrome.runtime.sendMessage({\n          command: \"set_timer\",\n          time: result.time_remaining,\n          icon: chrome.runtime.getURL(`assets/Pets/${current_pet_gif}.gif`),\n        });\n      chrome.storage.sync.set({ timer: target_time.getTime() });\n      updateTimer();\n      update_timer_interval = setInterval(updateTimer, 1000);\n    } else {\n      var now = new Date();\n      target_time = new Date(now.getTime() + time);\n      if (!leave_timer)\n        chrome.runtime.sendMessage({\n          command: \"set_timer\",\n          time: time,\n          icon: chrome.runtime.getURL(`assets/Pets/${current_pet_gif}.gif`),\n        });\n      chrome.storage.sync.set({ timer: target_time.getTime() });\n      updateTimer();\n      update_timer_interval = setInterval(updateTimer, 1000);\n    }\n    chrome.storage.sync.set({ timer_paused: false });\n  });\n}\n\nfunction updateTimer() {\n  var now = new Date();\n  var minutes = Math.floor((target_time - now) / 60000);\n  var seconds = Math.round((target_time - now) / 1000) % 60;\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\n  document.getElementById(\"study_clock\").innerHTML = `${minutes}:${seconds}`;\n}\n\nfunction pauseTimer(leave_timer) {\n  chrome.storage.sync.set({ timer_paused: true }, () => {\n    document.getElementById(\"start_pause_button\").innerHTML = \"START\";\n    clearInterval(update_timer_interval);\n    if (!leave_timer) chrome.runtime.sendMessage({ command: \"stop_timer\" });\n    var now = new Date();\n    var time_remaining = target_time - now;\n    chrome.storage.sync.set({ time_remaining: time_remaining });\n    chrome.storage.sync.set({ timer_running: false });\n  });\n}\n\nfunction switchBreak() {\n  clearInterval(update_timer_interval);\n  document.getElementById(\"study_clock\").innerHTML = `0:00`;\n\n  if (document.getElementById(\"study_title\").innerHTML == \"BREAK\") {\n    document.getElementById(\"study_title\").innerHTML = \"STUDY\";\n    time = study_amount;\n  } else {\n    document.getElementById(\"study_title\").innerHTML = \"BREAK\";\n    time = break_amount;\n  }\n\n  startTimer(true);\n  pauseTimer(true);\n\n  break_time = !break_time;\n  chrome.storage.sync.set({ break_time: break_time });\n}\n"],"names":[],"sourceRoot":""}